networks:
  payment_net:
    driver: bridge
  backend:
    external: true
    name: seiflow_backend

volumes:
  payment_postgres_data:
    driver: local
  payment_redis_data:
    driver: local

services:
  payment_service:
    build: 
      context: ../../services/payment_service
      dockerfile: Dockerfile
    container_name: payment_service
    ports:
      - "${PAYMENT_SERVICE_PORT}:8091"
    networks:
      - payment_net
      - backend
    depends_on:
      payment_postgres:
        condition: service_healthy
      payment_redis:
        condition: service_healthy
    environment:
      DB_HOST: payment_postgres
      DB_PORT: 5432
      DB_USER: ${PAYMENT_POSTGRES_USER}
      DB_PASSWORD: ${PAYMENT_POSTGRES_PASSWORD}
      DB_NAME: ${PAYMENT_POSTGRES_DB}
      REDIS_HOST: payment_redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${PAYMENT_REDIS_PASSWORD}
    restart: unless-stopped

  payment_postgres:
    image: postgres:15-alpine
    container_name: payment_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PAYMENT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PAYMENT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PAYMENT_POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data
    ports:
      - "${PAYMENT_POSTGRES_PORT}:5432"
    volumes:
      - payment_postgres_data:/var/lib/postgresql/data
    networks:
      - payment_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PAYMENT_POSTGRES_USER} -d ${PAYMENT_POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  payment_redis:
    image: redis:7-alpine
    container_name: payment_redis
    restart: unless-stopped
    ports:
      - "${PAYMENT_REDIS_PORT}:6379"
    volumes:
      - payment_redis_data:/data
    networks:
      - payment_net
    command: redis-server --requirepass ${PAYMENT_REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${PAYMENT_REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5