networks:
  board_net:
    driver: bridge
  backend:
    external: true
    name: seiflow_backend

volumes:
  board_mongo_data:
    driver: local
  board_redis_data:
    driver: local

services:
  board_service:
    build: 
      context: ../../services/board_service
      dockerfile: Dockerfile
    container_name: board_service
    ports:
      - "${BOARD_SERVICE_PORT}:8090"
    networks:
      - board_net
      - backend
    depends_on:
      board_mongo:
        condition: service_healthy
      board_redis:
        condition: service_healthy
    environment:
      MONGO_DATABASE: ${BOARD_MONGO_DATABASE}
      REDIS_HOST: board_redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${BOARD_REDIS_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${BOARD_MONGO_ROOT_USERNAME}:${BOARD_MONGO_ROOT_PASSWORD}@board_mongo:27017/
    restart: unless-stopped

  board_mongo:
    image: mongo:7
    container_name: board_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${BOARD_MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${BOARD_MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${BOARD_MONGO_DATABASE}
    volumes:
      - board_mongo_data:/data/db
    ports:
      - "${BOARD_MONGO_PORT}:27017"
    networks:
      - board_net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  board_redis:
    image: redis:7-alpine
    container_name: board_redis
    restart: unless-stopped
    ports:
      - "${BOARD_REDIS_PORT}:6379"
    volumes:
      - board_redis_data:/data
    networks:
      - board_net
    command: redis-server --requirepass ${BOARD_REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${BOARD_REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  board_mongo_express:
    image: mongo-express
    container_name: board_mongo_express
    restart: unless-stopped
    ports:
      - "${BOARD_MONGO_EXPRESS_PORT}:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${BOARD_MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${BOARD_MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: board_mongo
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
    depends_on:
      board_mongo:
        condition: service_healthy
    networks: 
      - board_net