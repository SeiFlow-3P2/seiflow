networks:
  auth_net:
    driver: bridge
  backend:
    external: true
    name: seiflow_backend

volumes:
  auth_postgres_data:
    driver: local
  auth_redis_data:
    driver: local

services:
  auth_service:
    build: 
      context: ../../services/auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "${AUTH_SERVICE_PORT}:8093"
    networks:
      - auth_net
      - backend
    depends_on:
      auth_postgres:
        condition: service_healthy
      auth_redis:
        condition: service_healthy
    environment:
      GRPC_PORT: ${AUTH_SERVICE_PORT}
      ACCESS_TOKEN_TTL: ${AUTH_ACCESS_TOKEN_TTL}
      REFRESH_TOKEN_TTL: ${AUTH_REFRESH_TOKEN_TTL}
      
      DB_HOST: ${AUTH_POSTGRES_HOST}
      DB_PORT: ${AUTH_POSTGRES_PORT}
      DB_USER: ${AUTH_POSTGRES_USER}
      DB_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      DB_NAME: ${AUTH_POSTGRES_DB}
      DB_SSLMODE: ${AUTH_POSTGRES_SSLMODE}

      RD_HOST: ${AUTH_REDIS_HOST}
      RD_PASSWORD: ${AUTH_REDIS_PASSWORD}
      RD_ID: ${AUTH_REDIS_ID}
      
      GITHUB_CLIENT_ID: ${AUTH_GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${AUTH_GITHUB_CLIENT_SECRET}
      GOOGLE_CLIENT_ID: ${AUTH_GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${AUTH_GOOGLE_CLIENT_SECRET}

      SECRET: ${AUTH_SECRET}
      APP_URL: ${AUTH_APP_URL}

    restart: unless-stopped

  auth_postgres:
    image: postgres:16-alpine
    container_name: auth_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data
    ports:
      - "${AUTH_POSTGRES_PORT}:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    networks:
      - auth_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  auth_redis:
    image: redis:7.4-alpine
    container_name: auth_redis
    restart: unless-stopped
    ports:
      - "${AUTH_REDIS_PORT}:6379"
    volumes:
      - auth_redis_data:/data
    networks:
      - auth_net
    command: redis-server --requirepass ${AUTH_REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${AUTH_REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5