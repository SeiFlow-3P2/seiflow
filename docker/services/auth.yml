# Auth создает свои ресурсы
networks:
  auth_net:
    driver: bridge
  backend:
    driver: bridge

volumes:
  auth_postgres_data:
    driver: local
  auth_redis_data:
    driver: local

services:
  auth_service:
    build: ../../services/auth_service
    container_name: auth_service
    ports:
      - "${AUTH_SERVICE_PORT}:8000"
    networks:
      - auth_net
      - backend
    depends_on:
      auth_postgres:
        condition: service_healthy
      auth_redis:
        condition: service_healthy
    environment:
      - DB_HOST=auth_postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - REDIS_HOST=auth_redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped

  auth_postgres:
    image: postgres:latest
    container_name: auth_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
    ports:
      - "${AUTH_POSTGRES_PORT}:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - auth_net
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres_user} -d ${POSTGRES_DB:-postgres_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    tty: true
    stdin_open: true

  auth_redis:
    image: redis:latest
    container_name: auth_redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "${AUTH_REDIS_PORT}:6379"
    volumes:
      - auth_redis_data:/data
    networks:
      - auth_net
    command: >
      redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    tty: true
    stdin_open: true